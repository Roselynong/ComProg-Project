package application;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.sql.ResultSet;

import javax.swing.JOptionPane;
/**
 *
 * @author Roselyn
 */
public class AccountEdit extends javax.swing.JFrame {

    /**
     * Creates new form Account
     */
    public AccountEdit() {
        initComponents();
        
        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        populateFieldsFromDatabase("defaultTitle"); // Provide a default title to fetch data
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel2 = new javax.swing.JPanel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenu2 = new javax.swing.JMenu();
        gender = new javax.swing.ButtonGroup();
        accountPanel = new javax.swing.JPanel();
        usernameLabel = new javax.swing.JLabel();
        uploadButton = new javax.swing.JButton();
        nameLabel = new javax.swing.JLabel();
        nameField = new javax.swing.JTextField();
        bdayLabel = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        genderLabel = new javax.swing.JLabel();
        bdayDate = new com.toedter.calendar.JDateChooser();
        usernameField1 = new javax.swing.JTextField();
        schoolidLabel = new javax.swing.JLabel();
        idField = new javax.swing.JTextField();
        maleGender = new javax.swing.JRadioButton();
        femaleGender = new javax.swing.JRadioButton();
        updateButton1 = new javax.swing.JButton();

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );

        jMenu1.setText("File");
        jMenuBar1.add(jMenu1);

        jMenu2.setText("Edit");
        jMenuBar1.add(jMenu2);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        accountPanel.setBackground(new java.awt.Color(255, 204, 153));

        usernameLabel.setFont(new java.awt.Font("Baskerville Old Face", 1, 14)); // NOI18N
        usernameLabel.setText("Username:");

        uploadButton.setBackground(new java.awt.Color(255, 153, 102));
        uploadButton.setFont(new java.awt.Font("Malgun Gothic", 1, 12)); // NOI18N
        uploadButton.setText("Upload");
        uploadButton.setHorizontalAlignment(javax.swing.SwingConstants.LEADING);
        uploadButton.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);
        uploadButton.setVerticalAlignment(javax.swing.SwingConstants.TOP);
        uploadButton.setVerticalTextPosition(javax.swing.SwingConstants.TOP);
        uploadButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                uploadButtonActionPerformed(evt);
            }
        });

        nameLabel.setFont(new java.awt.Font("Baskerville Old Face", 1, 14)); // NOI18N
        nameLabel.setText("Name:");

        nameField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nameFieldActionPerformed(evt);
            }
        });

        bdayLabel.setFont(new java.awt.Font("Baskerville Old Face", 1, 14)); // NOI18N
        bdayLabel.setText("Birthday:");

        jPanel3.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 2, true));

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 92, Short.MAX_VALUE)
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 81, Short.MAX_VALUE)
        );

        genderLabel.setFont(new java.awt.Font("Baskerville Old Face", 1, 14)); // NOI18N
        genderLabel.setText("Gender:");

        bdayDate.setDateFormatString("MM-dd-yyyy");

        usernameField1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                usernameField1ActionPerformed(evt);
            }
        });

        schoolidLabel.setFont(new java.awt.Font("Baskerville Old Face", 1, 14)); // NOI18N
        schoolidLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        schoolidLabel.setText("School ID: ");
        schoolidLabel.setToolTipText("");

        idField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                idFieldActionPerformed(evt);
            }
        });

        gender.add(maleGender);
        maleGender.setFont(new java.awt.Font("Ebrima", 1, 14)); // NOI18N
        maleGender.setText("Male");
        maleGender.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                maleGenderActionPerformed(evt);
            }
        });

        gender.add(femaleGender);
        femaleGender.setFont(new java.awt.Font("Ebrima", 1, 14)); // NOI18N
        femaleGender.setText("Female");
        femaleGender.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                femaleGenderActionPerformed(evt);
            }
        });

        updateButton1.setBackground(new java.awt.Color(255, 153, 102));
        updateButton1.setFont(new java.awt.Font("Malgun Gothic", 1, 12)); // NOI18N
        updateButton1.setText("Update");
        updateButton1.setHorizontalAlignment(javax.swing.SwingConstants.LEADING);
        updateButton1.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);
        updateButton1.setVerticalAlignment(javax.swing.SwingConstants.TOP);
        updateButton1.setVerticalTextPosition(javax.swing.SwingConstants.TOP);
        updateButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout accountPanelLayout = new javax.swing.GroupLayout(accountPanel);
        accountPanel.setLayout(accountPanelLayout);
        accountPanelLayout.setHorizontalGroup(
            accountPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, accountPanelLayout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(uploadButton)
                .addGap(98, 98, 98))
            .addGroup(accountPanelLayout.createSequentialGroup()
                .addGroup(accountPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(accountPanelLayout.createSequentialGroup()
                        .addGap(87, 87, 87)
                        .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(accountPanelLayout.createSequentialGroup()
                        .addGap(32, 32, 32)
                        .addGroup(accountPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(accountPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(accountPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(accountPanelLayout.createSequentialGroup()
                                        .addComponent(schoolidLabel)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(idField, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(accountPanelLayout.createSequentialGroup()
                                        .addGap(3, 3, 3)
                                        .addGroup(accountPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(accountPanelLayout.createSequentialGroup()
                                                .addGap(18, 18, 18)
                                                .addComponent(maleGender, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(femaleGender))
                                            .addComponent(genderLabel)
                                            .addComponent(bdayLabel)
                                            .addComponent(bdayDate, javax.swing.GroupLayout.PREFERRED_SIZE, 198, javax.swing.GroupLayout.PREFERRED_SIZE))))
                                .addGroup(accountPanelLayout.createSequentialGroup()
                                    .addGap(64, 64, 64)
                                    .addComponent(updateButton1)))
                            .addGroup(accountPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(nameLabel)
                                .addComponent(nameField, javax.swing.GroupLayout.PREFERRED_SIZE, 198, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(usernameLabel)
                                .addComponent(usernameField1, javax.swing.GroupLayout.PREFERRED_SIZE, 198, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap(36, Short.MAX_VALUE))
        );
        accountPanelLayout.setVerticalGroup(
            accountPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(accountPanelLayout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(uploadButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(usernameLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(usernameField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(nameLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(nameField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(bdayLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(bdayDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(genderLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(accountPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(maleGender)
                    .addComponent(femaleGender))
                .addGap(14, 14, 14)
                .addGroup(accountPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(schoolidLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(idField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(updateButton1)
                .addContainerGap(442, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(accountPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(accountPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void nameFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nameFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_nameFieldActionPerformed

    private void uploadButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_uploadButtonActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_uploadButtonActionPerformed

    private void usernameField1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_usernameField1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_usernameField1ActionPerformed

    private void idFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_idFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_idFieldActionPerformed

    private void maleGenderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_maleGenderActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_maleGenderActionPerformed

    private void femaleGenderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_femaleGenderActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_femaleGenderActionPerformed

    private void updateButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateButton1ActionPerformed
    // Retrieve data from the form fields
    String username = usernameField1.getText();
    String name = nameField.getText();
    java.util.Date bday = bdayDate.getDate();
    String genderidentity = maleGender.isSelected() ? "Male" : "Female";
    String schoolId = idField.getText();

    try {
        Class.forName("org.postgresql.Driver");
        try (Connection conn = DriverManager.getConnection("jdbc:postgresql://localhost:5432/UserInfo", "studyflow", "1234")) {
            boolean exists;
            // Check if a record with the same school_id exists
            try (PreparedStatement checkStmt = conn.prepareStatement("SELECT COUNT(*) FROM login.accounts WHERE school_id = ?")) {
                checkStmt.setString(1, schoolId);
                ResultSet rs = checkStmt.executeQuery();
                rs.next();
                exists = rs.getInt(1) > 0;
            }

            if (exists) {
                // If a record with the same school_id exists, perform update operation
                String sqlQuery = "UPDATE login.accounts SET ";
                boolean firstUpdateField = true;

                if (!username.isEmpty()) {
                    sqlQuery += "username=?, ";
                    firstUpdateField = false;
                }
                if (!name.isEmpty()) {
                    sqlQuery += "name=?, ";
                    firstUpdateField = false;
                }
                if (bday != null) {
                    sqlQuery += "bday=?, ";
                    firstUpdateField = false;
                }
                if (!genderidentity.isEmpty()) {
                    sqlQuery += "gender=?, ";
                    firstUpdateField = false;
                }

                // Remove the last comma and space from the query
                sqlQuery = sqlQuery.substring(0, sqlQuery.length() - 2);

                // Append the WHERE clause
                sqlQuery += " WHERE school_id=?";

                // Create the prepared statement
                try (PreparedStatement pstmt = conn.prepareStatement(sqlQuery)) {
                    int parameterIndex = 1;

                    if (!username.isEmpty()) {
                        pstmt.setString(parameterIndex++, username);
                    }
                    if (!name.isEmpty()) {
                        pstmt.setString(parameterIndex++, name);
                    }
                    if (bday != null) {
                        pstmt.setDate(parameterIndex++, new java.sql.Date(bday.getTime()));
                    }
                    if (!genderidentity.isEmpty()) {
                        pstmt.setString(parameterIndex++, genderidentity);
                    }

                    pstmt.setString(parameterIndex, schoolId);

                    int rowsAffected = pstmt.executeUpdate();

                    if (rowsAffected > 0) {
                        JOptionPane.showMessageDialog(null, "Updated successful!");
                        
                        AccountEdit accountEdit = new AccountEdit();
                        accountEdit.populateFieldsFromDatabase(schoolId);
                    } else {
                        JOptionPane.showMessageDialog(null, "Operation failed. No matching record found.");
                    }
                }
            } else {
                // If no record with the same school_id exists, insert a new record
                String insertQuery = "INSERT INTO login.accounts (school_id, username, name, bday, gender) VALUES (?, ?, ?, ?, ?)";

                try (PreparedStatement pstmt = conn.prepareStatement(insertQuery)) {
                    pstmt.setString(1, schoolId);
                    pstmt.setString(2, username);
                    pstmt.setString(3, name);
                    pstmt.setDate(4, bday != null ? new java.sql.Date(bday.getTime()) : null);
                    pstmt.setString(5, genderidentity);

                    int rowsAffected = pstmt.executeUpdate();

                    if (rowsAffected > 0) {
                        JOptionPane.showMessageDialog(null, "New account data is created successfully!");
                        
                        AccountEdit accountEdit = new AccountEdit();
                        accountEdit.populateFieldsFromDatabase(schoolId);
                    } else {
                        JOptionPane.showMessageDialog(null, "Insert operation failed.");
                    }
                }
            }
        }
    } catch (ClassNotFoundException | SQLException e) {
        JOptionPane.showMessageDialog(null, "Error: " + e.getMessage());
    }
    }//GEN-LAST:event_updateButton1ActionPerformed

        private void populateFieldsFromDatabase(String title) {
        String username = fetchUsernameFromDatabase(title);
        String name = fetchNameFromDatabase(title);
        String gender = fetchGenderFromDatabase(title);
        String schoolId = fetchSchoolIdFromDatabase(title);
        
        // Populate fields with fetched data
        usernameField1.setText(username);
        nameField.setText(name);
        idField.setText(schoolId);
        if (gender != null) {
            if (gender.equals("Male")) {
                maleGender.setSelected(true);
            } else if (gender.equals("Female")) {
                femaleGender.setSelected(true);
            }
        }
    }
    
 private String fetchUsernameFromDatabase(String schoolId) {
    String username = null;
    try {
        Class.forName("org.postgresql.Driver");
        try (Connection conn = DriverManager.getConnection("jdbc:postgresql://localhost:5432/UserInfo", "studyflow", "1234");
             PreparedStatement stmt = conn.prepareStatement("SELECT username FROM login.accounts WHERE school_id = ?")) {
            stmt.setString(1, schoolId); // Set the schoolId parameter in the prepared statement
            ResultSet rs = stmt.executeQuery();
            if (rs.next()) {
                username = rs.getString("username");
            }
        }
    } catch (ClassNotFoundException | SQLException e) {
        // Handle or log the exception as needed
    }
    return username;
}

private String fetchNameFromDatabase(String schoolId) {
    String name = null;
    try {
        Class.forName("org.postgresql.Driver");
        try (Connection conn = DriverManager.getConnection("jdbc:postgresql://localhost:5432/UserInfo", "studyflow", "1234");
             PreparedStatement stmt = conn.prepareStatement("SELECT name FROM login.accounts WHERE school_id = ?")) {
            stmt.setString(1, schoolId); // Set the schoolId parameter in the prepared statement
            ResultSet rs = stmt.executeQuery();
            if (rs.next()) {
                name = rs.getString("name");
            }
        }
    } catch (ClassNotFoundException | SQLException e) {
        // Handle or log the exception as needed
    }
    return name;
}

private String fetchGenderFromDatabase(String schoolId) {
    String genderIdentity = null;
    try {
        Class.forName("org.postgresql.Driver");
        try (Connection conn = DriverManager.getConnection("jdbc:postgresql://localhost:5432/UserInfo", "studyflow", "1234");
             PreparedStatement stmt = conn.prepareStatement("SELECT gender FROM login.accounts WHERE school_id = ?")) {
            stmt.setString(1, schoolId); // Set the schoolId parameter in the prepared statement
            ResultSet rs = stmt.executeQuery();
            if (rs.next()) {
                genderIdentity = rs.getString("gender");
            }
        }
    } catch (ClassNotFoundException | SQLException e) {
        // Handle or log the exception as needed
    }
    return genderIdentity;
}

String fetchSchoolIdFromDatabase(String schoolId) {
    String retrievedSchoolId = null;
    try {
        Class.forName("org.postgresql.Driver");
        try (Connection conn = DriverManager.getConnection("jdbc:postgresql://localhost:5432/UserInfo", "studyflow", "1234");
             PreparedStatement stmt = conn.prepareStatement("SELECT school_id FROM login.accounts WHERE school_id = ?")) {
            stmt.setString(1, schoolId); // Set the schoolId parameter in the prepared statement
            ResultSet rs = stmt.executeQuery();
            if (rs.next()) {
                retrievedSchoolId = rs.getString("school_id");
            }
        }
    } catch (ClassNotFoundException | SQLException e) {
        // Handle or log the exception as needed
    }
    return retrievedSchoolId;
}

        
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AccountEdit.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AccountEdit.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AccountEdit.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AccountEdit.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new AccountEdit().setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel accountPanel;
    private com.toedter.calendar.JDateChooser bdayDate;
    private javax.swing.JLabel bdayLabel;
    private javax.swing.JRadioButton femaleGender;
    private javax.swing.ButtonGroup gender;
    private javax.swing.JLabel genderLabel;
    private javax.swing.JTextField idField;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JRadioButton maleGender;
    private javax.swing.JTextField nameField;
    private javax.swing.JLabel nameLabel;
    private javax.swing.JLabel schoolidLabel;
    private javax.swing.JButton updateButton1;
    private javax.swing.JButton uploadButton;
    private javax.swing.JTextField usernameField1;
    private javax.swing.JLabel usernameLabel;
    // End of variables declaration//GEN-END:variables
}
