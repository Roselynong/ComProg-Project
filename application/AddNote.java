package application;

import java.awt.Color;
import java.text.SimpleDateFormat;
import javax.swing.JOptionPane;
import java.util.Date;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.sql.ResultSet;
import javax.swing.JFrame;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.text.AttributeSet;

import javax.swing.text.SimpleAttributeSet;
import javax.swing.text.StyleConstants;
import javax.swing.text.StyledDocument;

/**
 *
 * @author Roselyn
 */
public class AddNote extends javax.swing.JPanel {

    /**
     * Creates new form AddNote
     */
    private boolean isBoldActive = false;
    private boolean isItalicsActive = false;
    private boolean isUnderlineActive = false;
    private boolean applyBoldToNextInput = false;
    private boolean applyItalicsToNextInput = false;
    private boolean applyUnderlineToNextInput = false;
    private HomePage homePage;

    public AddNote(HomePage homePage) {
        this.homePage = homePage;
        initComponents();
    }

    
    public AddNote() {
        initComponents();
        setVisible(true);
        updateCurrentDate();
        setSaveNoteButtonPosition();
        
        textField.getDocument().addDocumentListener(new DocumentListener() {
        @Override
        public void insertUpdate(DocumentEvent e) {
            updateWordCount();
            updateCharacterCount();
        }

        @Override
        public void removeUpdate(DocumentEvent e) {
            updateWordCount();
            updateCharacterCount();
        }

        @Override
        public void changedUpdate(DocumentEvent e) {
            updateWordCount();
            updateCharacterCount();
        }
    });
        
        // Add this in the constructor or an initialization method
        Bold.addMouseListener(new java.awt.event.MouseAdapter() {
            @Override
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                BoldMouseClicked(evt);
        }
    });
        
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        NotePanel = new javax.swing.JPanel();
        titleField = new javax.swing.JTextField();
        jScrollPane2 = new javax.swing.JScrollPane();
        textField = new javax.swing.JTextPane();
        Bold = new javax.swing.JLabel();
        Italics = new javax.swing.JLabel();
        Underline = new javax.swing.JLabel();
        characters = new javax.swing.JLabel();
        wordCount = new javax.swing.JLabel();
        saveNote = new javax.swing.JButton();
        CurrentDate = new javax.swing.JLabel();
        subjectField = new javax.swing.JTextField();
        subjectLabel = new javax.swing.JLabel();
        noteentryLabel = new javax.swing.JLabel();
        noteentryField = new javax.swing.JTextField();
        uniqueAccess = new javax.swing.JLabel();

        NotePanel.setBackground(new java.awt.Color(255, 245, 228));
        NotePanel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(221, 195, 150)));

        titleField.setFont(new java.awt.Font("Candara", 1, 18)); // NOI18N
        titleField.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        titleField.setToolTipText("Insert Title");
        titleField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                titleFieldActionPerformed(evt);
            }
        });

        jScrollPane2.setViewportView(textField);

        Bold.setFont(new java.awt.Font("Baskerville Old Face", 1, 14)); // NOI18N
        Bold.setText("B");
        Bold.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                BoldMouseClicked(evt);
            }
        });

        Italics.setFont(new java.awt.Font("Baskerville Old Face", 2, 14)); // NOI18N
        Italics.setText("I");
        Italics.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                ItalicsMouseClicked(evt);
            }
        });

        Underline.setFont(new java.awt.Font("Baskerville Old Face", 0, 14)); // NOI18N
        Underline.setText("U");
        Underline.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                UnderlineMouseClicked(evt);
            }
        });

        characters.setFont(new java.awt.Font("Baskerville Old Face", 0, 14)); // NOI18N
        characters.setText("Characters");
        characters.setToolTipText("");
        characters.setVerticalAlignment(javax.swing.SwingConstants.TOP);
        characters.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        characters.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);
        characters.setVerifyInputWhenFocusTarget(false);

        wordCount.setFont(new java.awt.Font("Baskerville Old Face", 0, 14)); // NOI18N
        wordCount.setText("Word Count");

        saveNote.setBackground(new java.awt.Color(255, 204, 153));
        saveNote.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        saveNote.setText("Save");
        saveNote.setBorder(null);
        saveNote.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                saveNoteMousePressed(evt);
            }
        });
        saveNote.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveNoteActionPerformed(evt);
            }
        });

        CurrentDate.setFont(new java.awt.Font("Baskerville Old Face", 0, 14)); // NOI18N
        CurrentDate.setText("Date");

        subjectField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                subjectFieldActionPerformed(evt);
            }
        });

        subjectLabel.setFont(new java.awt.Font("Baskerville Old Face", 0, 14)); // NOI18N
        subjectLabel.setText("Subject:");
        subjectLabel.setToolTipText("");
        subjectLabel.setVerticalAlignment(javax.swing.SwingConstants.TOP);
        subjectLabel.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        subjectLabel.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);
        subjectLabel.setVerifyInputWhenFocusTarget(false);

        noteentryLabel.setFont(new java.awt.Font("Baskerville Old Face", 0, 14)); // NOI18N
        noteentryLabel.setText("Note Entry:");
        noteentryLabel.setToolTipText("");
        noteentryLabel.setVerticalAlignment(javax.swing.SwingConstants.TOP);
        noteentryLabel.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        noteentryLabel.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);
        noteentryLabel.setVerifyInputWhenFocusTarget(false);

        noteentryField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                noteentryFieldActionPerformed(evt);
            }
        });

        uniqueAccess.setFont(new java.awt.Font("Baskerville Old Face", 0, 14)); // NOI18N
        uniqueAccess.setText("Unique Identifier:");

        javax.swing.GroupLayout NotePanelLayout = new javax.swing.GroupLayout(NotePanel);
        NotePanel.setLayout(NotePanelLayout);
        NotePanelLayout.setHorizontalGroup(
            NotePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(NotePanelLayout.createSequentialGroup()
                .addGroup(NotePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(NotePanelLayout.createSequentialGroup()
                        .addGap(21, 21, 21)
                        .addGroup(NotePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(characters)
                            .addComponent(wordCount)
                            .addGroup(NotePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(titleField)
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 365, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(NotePanelLayout.createSequentialGroup()
                        .addGap(31, 31, 31)
                        .addGroup(NotePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(NotePanelLayout.createSequentialGroup()
                                .addGroup(NotePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(CurrentDate, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(NotePanelLayout.createSequentialGroup()
                                        .addComponent(Bold, javax.swing.GroupLayout.PREFERRED_SIZE, 13, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(10, 10, 10)
                                        .addComponent(Italics, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(Underline, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(198, 198, 198)
                                .addComponent(saveNote, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(NotePanelLayout.createSequentialGroup()
                                .addGroup(NotePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(subjectLabel)
                                    .addComponent(subjectField, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(NotePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(noteentryLabel)
                                    .addComponent(noteentryField, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addComponent(uniqueAccess))))
                .addContainerGap(35, Short.MAX_VALUE))
        );
        NotePanelLayout.setVerticalGroup(
            NotePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(NotePanelLayout.createSequentialGroup()
                .addGap(33, 33, 33)
                .addComponent(titleField, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 317, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(11, 11, 11)
                .addGroup(NotePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(wordCount)
                    .addComponent(Bold)
                    .addComponent(Italics)
                    .addComponent(Underline, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(NotePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(NotePanelLayout.createSequentialGroup()
                        .addComponent(characters)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(NotePanelLayout.createSequentialGroup()
                        .addGap(0, 8, Short.MAX_VALUE)
                        .addComponent(uniqueAccess)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(NotePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, NotePanelLayout.createSequentialGroup()
                                .addComponent(subjectLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(subjectField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, NotePanelLayout.createSequentialGroup()
                                .addComponent(noteentryLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(noteentryField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(NotePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(saveNote, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(CurrentDate))))
                .addGap(14, 14, 14))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(NotePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(NotePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void saveNoteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveNoteActionPerformed
        saveNoteData();
    }//GEN-LAST:event_saveNoteActionPerformed

    private void setSaveNoteButtonPosition() {
        int x = 100; // specify the x-coordinate of the button
        int y = 400; // specify the y-coordinate of the button
        int width = 100; // specify the width of the button
        int height = 30; // specify the height of the button
        saveNote.setBounds(x, y, width, height);
}
    
    private void BoldMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_BoldMouseClicked
    StyledDocument doc = textField.getStyledDocument();
    int start = textField.getSelectionStart();
    int end = textField.getSelectionEnd();

    AttributeSet attrs = doc.getCharacterElement(start).getAttributes();
    boolean isBold = StyleConstants.isBold(attrs);

    SimpleAttributeSet attr = new SimpleAttributeSet();
    // Toggle bold state
    StyleConstants.setBold(attr, !isBold);

    // Apply the style to the selected text
    doc.setCharacterAttributes(start, end - start, attr, false);

    // Update isBoldActive based on the current style of the selected text
    isBoldActive = !isBold;

    // Update the appearance of the "B" button accordingly
    if (isBoldActive) {
        Bold.setForeground(new Color(239, 189, 145)); // Set label color to active color
    } else {
        Bold.setForeground(Color.BLACK); // Reset label color to black
    }

    // If there is no selected text, apply the style to the next input
    if (start == end) {
        textField.setCharacterAttributes(attr, false);
    }

    if (start == end) {
        applyBoldToNextInput = true;
    }

    if (applyBoldToNextInput) {
        SimpleAttributeSet nextInputAttr = new SimpleAttributeSet();
        StyleConstants.setBold(nextInputAttr, !isBold); // Toggle bold state
        textField.setCharacterAttributes(nextInputAttr, false);
        applyBoldToNextInput = false; // Reset the flag
    }
    }//GEN-LAST:event_BoldMouseClicked

    private void ItalicsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ItalicsMouseClicked
        StyledDocument doc = textField.getStyledDocument();
        int start = textField.getSelectionStart();
        int end = textField.getSelectionEnd();

        AttributeSet attrs = doc.getCharacterElement(start).getAttributes();
        boolean isItalics = StyleConstants.isItalic(attrs);

        SimpleAttributeSet attr = new SimpleAttributeSet();
        // Toggle italics state
        StyleConstants.setItalic(attr, !isItalics);

        // Apply the style to the selected text
        doc.setCharacterAttributes(start, end - start, attr, false);

        // Update isItalicsActive based on the current style of the selected text
        isItalicsActive = !isItalics;

        // Update the appearance of the "I" button accordingly
        if (isItalicsActive) {
            Italics.setForeground(new Color(239, 189, 145)); // Set label color to active color
        } else {
            Italics.setForeground(Color.BLACK); // Reset label color to black
        }

        // If there is no selected text, apply the style to the next input
        if (start == end) {
            textField.setCharacterAttributes(attr, false);
        }

        if (start == end) {
            applyItalicsToNextInput = true;
        }

        if (applyItalicsToNextInput) {
            SimpleAttributeSet nextInputAttr = new SimpleAttributeSet();
            StyleConstants.setItalic(nextInputAttr, !isItalics); // Toggle italics state
            textField.setCharacterAttributes(nextInputAttr, false);
            applyItalicsToNextInput = false; // Reset the flag
        }
    }//GEN-LAST:event_ItalicsMouseClicked

    private void UnderlineMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_UnderlineMouseClicked
        StyledDocument doc = textField.getStyledDocument();
        int start = textField.getSelectionStart();
        int end = textField.getSelectionEnd();

        AttributeSet attrs = doc.getCharacterElement(start).getAttributes();
        boolean isUnderline = StyleConstants.isUnderline(attrs);

        SimpleAttributeSet attr = new SimpleAttributeSet();
        // Toggle underline state
        StyleConstants.setUnderline(attr, !isUnderline);

        // Apply the style to the selected text
        doc.setCharacterAttributes(start, end - start, attr, false);

        // Update isUnderlineActive based on the current style of the selected text
        isUnderlineActive = !isUnderline;

        // Update the appearance of the "U" button accordingly
        if (isUnderlineActive) {
            Underline.setForeground(new Color(239, 189, 145)); // Set label color to active color
        } else {
            Underline.setForeground(Color.BLACK); // Reset label color to black
        }

        // If there is no selected text, apply the style to the next input
        if (start == end) {
            textField.setCharacterAttributes(attr, false);
        }

        if (start == end) {
            applyUnderlineToNextInput = true;
        }

        if (applyUnderlineToNextInput) {
            SimpleAttributeSet nextInputAttr = new SimpleAttributeSet();
            StyleConstants.setUnderline(nextInputAttr, !isUnderline); // Toggle underline state
            textField.setCharacterAttributes(nextInputAttr, false);
            applyUnderlineToNextInput = false; // Reset the flag
        }
    }//GEN-LAST:event_UnderlineMouseClicked

    private void titleFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_titleFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_titleFieldActionPerformed

    private void subjectFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_subjectFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_subjectFieldActionPerformed

    private void noteentryFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_noteentryFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_noteentryFieldActionPerformed

    private void saveNoteMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_saveNoteMousePressed
        refreshNotesTable();
    }//GEN-LAST:event_saveNoteMousePressed

private void saveNoteData() {
    String title = titleField.getText();
    String text = textField.getText();
    String noteEntry = noteentryField.getText(); // Assuming noteentryField is a JTextField
    String subject = subjectField.getText(); // Assuming subjectField is a JTextField
    String currentDate = new java.text.SimpleDateFormat("yyyy-MM-dd HH:mm:ss").format(new Date());

    if (title.isEmpty() || text.isEmpty() || noteEntry.isEmpty() || subject.isEmpty()) {
        JOptionPane.showMessageDialog(null, "Please fill out all fields.", "Incomplete Data", JOptionPane.WARNING_MESSAGE);
        return; // Do not proceed if any field is empty
    }

    try {
        Class.forName("org.postgresql.Driver");
        try (Connection conn = DriverManager.getConnection("jdbc:postgresql://localhost:5432/UserInfo", "studyflow", "1234")) {
            String checkQuery = "SELECT COUNT(*) FROM login.notes WHERE subject = ? AND note_entry = ?";
            try (PreparedStatement checkStmt = conn.prepareStatement(checkQuery)) {
                checkStmt.setString(1, subject);
                checkStmt.setString(2, noteEntry);
                ResultSet rs = checkStmt.executeQuery();
                if (rs.next() && rs.getInt(1) > 0) {
                    // Update existing note
                    String updateQuery = "UPDATE login.notes SET title = ?, text = ?, date = ? WHERE subject = ? AND note_entry = ?";
                    try (PreparedStatement updateStmt = conn.prepareStatement(updateQuery)) {
                        updateStmt.setString(1, title);
                        updateStmt.setString(2, text);
                        updateStmt.setString(3, currentDate);
                        updateStmt.setString(4, subject);
                        updateStmt.setString(5, noteEntry);
                        
                        int rowsAffected = updateStmt.executeUpdate();
                        if (rowsAffected > 0) {
                            JOptionPane.showMessageDialog(null, "Note updated successfully!");
                            homePage.refreshNotesTable();
                        } else {
                            JOptionPane.showMessageDialog(null, "No matching note found to update.");
                        }
                    }
                } else {
                    // Insert new note
                    String insertQuery = "INSERT INTO login.notes (title, text, date, subject, note_entry) VALUES (?, ?, ?, ?, ?)";
                    try (PreparedStatement insertStmt = conn.prepareStatement(insertQuery)) {
                        insertStmt.setString(1, title);
                        insertStmt.setString(2, text);
                        insertStmt.setString(3, currentDate);
                        insertStmt.setString(4, subject);
                        insertStmt.setString(5, noteEntry);

                        int rowsAffected = insertStmt.executeUpdate();
                        if (rowsAffected > 0) {
                            JOptionPane.showMessageDialog(null, "Note saved successfully!");
                        } else {
                            JOptionPane.showMessageDialog(null, "Failed to save the note.");
                        }
                    }
                }
            }
        }
    } catch (ClassNotFoundException | SQLException e) {
        JOptionPane.showMessageDialog(null, "Database connection error: " + e.getMessage());
    }
}

            
    private void updateCurrentDate() {
        SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
        String currentDate = dateFormat.format(new Date());
        CurrentDate.setText(currentDate);
    }
    
    private void updateWordCount() {
        String text = textField.getText().trim();
        String[] words = text.split("\\s+");
        wordCount.setText("Word Count: " + words.length);
}
    
    private void updateCharacterCount() {
        String text = textField.getText().trim();
        int characterCount = text.length();
        characters.setText("Characters: " + characterCount);
    }

    public void populateFields(String title, String text, String subject, String noteEntry) {
        titleField.setText(title);
        textField.setText(text);
        subjectField.setText(subject);
        noteentryField.setText(noteEntry);
    }

    
    
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AddNote.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            JFrame frame = new JFrame("Add Note");
            frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
            frame.add(new AddNote());
            frame.pack();
            frame.setLocationRelativeTo(null); // Center the frame on the screen
            frame.setVisible(true);
        });
}

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel Bold;
    private javax.swing.JLabel CurrentDate;
    private javax.swing.JLabel Italics;
    private javax.swing.JPanel NotePanel;
    private javax.swing.JLabel Underline;
    private javax.swing.JLabel characters;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextField noteentryField;
    private javax.swing.JLabel noteentryLabel;
    private javax.swing.JButton saveNote;
    private javax.swing.JTextField subjectField;
    private javax.swing.JLabel subjectLabel;
    private javax.swing.JTextPane textField;
    private javax.swing.JTextField titleField;
    private javax.swing.JLabel uniqueAccess;
    private javax.swing.JLabel wordCount;
    // End of variables declaration//GEN-END:variables

    private void refreshNotesTable() {
        throw new UnsupportedOperationException("Not supported yet."); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody
    }

}
