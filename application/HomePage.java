package application;

import java.awt.Dimension;
import java.awt.Toolkit;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import javax.swing.JComboBox;
import javax.swing.JDialog;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.PreparedStatement;
import java.sql.Statement;
import javax.swing.RowFilter;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableRowSorter;

import javax.swing.JFrame;
import javax.swing.SwingUtilities;

/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */

/**
 *
 * @author Roselyn
 */
public class HomePage extends javax.swing.JFrame {
    
    /**
     * Creates new form HomePage
     */
    public HomePage() {
        initComponents();
        loadNotesData();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        HomePanel = new javax.swing.JPanel();
        LOGO = new javax.swing.JLabel();
        addbutton = new javax.swing.JButton();
        accountHolder = new javax.swing.JPanel();
        accountIcon = new javax.swing.JLabel();
        accountLabel = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        notesTable = new javax.swing.JTable();
        searchNote = new javax.swing.JTextField();
        noteButton = new javax.swing.JButton();
        deleteNote = new javax.swing.JButton();
        openNote = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        notesTable1 = new javax.swing.JTable();
        reminderButton = new javax.swing.JButton();
        searchReminder = new javax.swing.JTextField();
        openReminder = new javax.swing.JButton();
        deleteReminder = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("StudyFlow");

        HomePanel.setBackground(new java.awt.Color(255, 244, 199));

        LOGO.setFont(new java.awt.Font("Bookman Old Style", 1, 48)); // NOI18N
        LOGO.setText("STUDYFLOW");

        addbutton.setBackground(new java.awt.Color(255, 204, 153));
        addbutton.setFont(new java.awt.Font("Agency FB", 0, 36)); // NOI18N
        addbutton.setText("+");
        addbutton.setBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED, new java.awt.Color(206, 153, 67), java.awt.Color.orange));
        addbutton.setBorderPainted(false);
        addbutton.setFocusPainted(false);
        addbutton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addbuttonActionPerformed(evt);
            }
        });

        accountHolder.setBackground(new java.awt.Color(255, 244, 199));

        javax.swing.GroupLayout accountHolderLayout = new javax.swing.GroupLayout(accountHolder);
        accountHolder.setLayout(accountHolderLayout);
        accountHolderLayout.setHorizontalGroup(
            accountHolderLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 272, Short.MAX_VALUE)
        );
        accountHolderLayout.setVerticalGroup(
            accountHolderLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 73, Short.MAX_VALUE)
        );

        accountIcon.setIcon(new javax.swing.ImageIcon(getClass().getResource("/application/images (3)-modified.png"))); // NOI18N
        accountIcon.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                accountIconMouseClicked(evt);
            }
        });

        accountLabel.setFont(new java.awt.Font("Bahnschrift", 1, 12)); // NOI18N
        accountLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        accountLabel.setText("   Account");

        jPanel1.setBackground(new java.awt.Color(239, 189, 145));
        jPanel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(199, 139, 86), 2));

        notesTable.setFont(new java.awt.Font("Malgun Gothic", 0, 14)); // NOI18N
        notesTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {"", null, null}
            },
            new String [] {
                "Note ID.", "Title", "Date"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        notesTable.setGridColor(new java.awt.Color(0, 0, 0));
        jScrollPane1.setViewportView(notesTable);

        searchNote.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchNoteActionPerformed(evt);
            }
        });

        noteButton.setText("Search");
        noteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                noteButtonActionPerformed(evt);
            }
        });

        deleteNote.setText("Delete");
        deleteNote.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteNoteActionPerformed(evt);
            }
        });

        openNote.setText("Open");
        openNote.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openNoteActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(17, 17, 17)
                .addComponent(noteButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(searchNote, javax.swing.GroupLayout.PREFERRED_SIZE, 383, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(openNote)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(deleteNote)
                .addContainerGap(17, Short.MAX_VALUE))
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel1Layout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 651, Short.MAX_VALUE)
                    .addContainerGap()))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(searchNote, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(noteButton)
                    .addComponent(deleteNote)
                    .addComponent(openNote))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                    .addContainerGap(49, Short.MAX_VALUE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 508, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap()))
        );

        jPanel2.setBackground(new java.awt.Color(239, 189, 145));
        jPanel2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(199, 139, 86), 2));

        notesTable1.setFont(new java.awt.Font("Malgun Gothic", 0, 14)); // NOI18N
        notesTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Reminder No.", "Description", "Date"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        notesTable1.setGridColor(new java.awt.Color(0, 0, 0));
        jScrollPane3.setViewportView(notesTable1);

        reminderButton.setText("Search");
        reminderButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                remindereminderButtonActionPerformed(evt);
            }
        });

        searchReminder.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchReminderActionPerformed(evt);
            }
        });

        openReminder.setText("Open");
        openReminder.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openReminderActionPerformed(evt);
            }
        });

        deleteReminder.setText("Delete");
        deleteReminder.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteReminderActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(reminderButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(searchReminder, javax.swing.GroupLayout.PREFERRED_SIZE, 343, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(openReminder, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(deleteReminder, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(20, 20, 20))
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 613, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(14, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(searchReminder, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(reminderButton)
                    .addComponent(deleteReminder)
                    .addComponent(openReminder))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 508, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        javax.swing.GroupLayout HomePanelLayout = new javax.swing.GroupLayout(HomePanel);
        HomePanel.setLayout(HomePanelLayout);
        HomePanelLayout.setHorizontalGroup(
            HomePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(HomePanelLayout.createSequentialGroup()
                .addGap(670, 670, 670)
                .addComponent(addbutton, javax.swing.GroupLayout.PREFERRED_SIZE, 229, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(HomePanelLayout.createSequentialGroup()
                .addGroup(HomePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(HomePanelLayout.createSequentialGroup()
                        .addGap(630, 630, 630)
                        .addComponent(LOGO)
                        .addGap(498, 498, 498)
                        .addGroup(HomePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(accountLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(accountIcon)))
                    .addGroup(HomePanelLayout.createSequentialGroup()
                        .addGap(60, 60, 60)
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(116, 116, 116)
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 120, Short.MAX_VALUE)
                .addComponent(accountHolder, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 269, Short.MAX_VALUE))
        );
        HomePanelLayout.setVerticalGroup(
            HomePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(HomePanelLayout.createSequentialGroup()
                .addGroup(HomePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, HomePanelLayout.createSequentialGroup()
                        .addGap(24, 24, 24)
                        .addComponent(accountIcon, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(accountLabel)
                        .addGap(12, 12, 12))
                    .addGroup(HomePanelLayout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addGroup(HomePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(LOGO, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(accountHolder, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)))
                .addComponent(addbutton, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(48, 48, 48)
                .addGroup(HomePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(1773, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(HomePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(HomePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void accountIconMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_accountIconMouseClicked
        Account accountFrame = new Account();
        accountFrame.pack(); // Ensure the frame size is calculated correctly

        // Set the location to the right side of the screen
        Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();
        int x = screenSize.width - accountFrame.getWidth();
        int y = 0; // or any desired Y position

        // Set the location of the frame to touch the right edge of the screen
        accountFrame.setLocation(x, y);

        // Show the Account JFrame
        accountFrame.setVisible(true);
        
        accountFrame.addWindowListener(new WindowAdapter() {
            @Override
            public void windowClosing(WindowEvent e) {
                setVisible(true); // Show the main frame when the account frame is closed
            }
        });
    }//GEN-LAST:event_accountIconMouseClicked

    private void addbuttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addbuttonActionPerformed
        JPanel panel = new JPanel();
        JLabel label = new JLabel("Select an option:");
        String[] options = {"Add new note", "Add new reminder"};
        JComboBox<String> dropdown = new JComboBox<>(options);

        panel.add(label);
        panel.add(dropdown);

        int result = JOptionPane.showOptionDialog(null, dropdown, "Select an option",
            JOptionPane.OK_CANCEL_OPTION, JOptionPane.PLAIN_MESSAGE, null, null, null);

        if (result == JOptionPane.OK_OPTION) {
            String selectedOption = (String) dropdown.getSelectedItem();
            // Depending on the selected option, perform corresponding actions
            if (selectedOption.equals("Add new note")) {
                System.out.println("Adding new note...");

                AddNote addNote = new AddNote();
                JDialog dialog = new JDialog();
                // Create a JFrame to hold the AddNote panel
                dialog.setModal(true); // Make the dialog modal
                dialog.setTitle("Add Note");
                dialog.getContentPane().add(addNote);
                dialog.pack();
                dialog.setLocationRelativeTo(null); // Center the dialog on the screen
                dialog.setVisible(true);
                
                loadNotesData();
            } else if (selectedOption.equals("Add new reminder")) {
                // Code to add new reminder
                System.out.println("Adding new reminder...");
                JOptionPane.showMessageDialog(null, "This code is work in progress. Wait for the next update!");
            }
        }

    }//GEN-LAST:event_addbuttonActionPerformed

    private void searchNoteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchNoteActionPerformed
        String searchText = searchNote.getText();
        DefaultTableModel model = (DefaultTableModel) notesTable.getModel();

        TableRowSorter<DefaultTableModel> sorter = new TableRowSorter<>(model);
        notesTable.setRowSorter(sorter);

        if (searchText.trim().length() == 0) {
            sorter.setRowFilter(null);
        } else {
            sorter.setRowFilter(RowFilter.regexFilter("(?i)" + searchText));
        }
    }//GEN-LAST:event_searchNoteActionPerformed

    private void noteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_noteButtonActionPerformed
        String searchText = searchNote.getText();
        if (searchText.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Please enter a specific title to search!", "Empty Search Field", JOptionPane.WARNING_MESSAGE);
        } else {
            // Perform search operation
            // TODO: Add your search logic here
        }
    }//GEN-LAST:event_noteButtonActionPerformed

    private void deleteNoteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteNoteActionPerformed
        int selectedRow = notesTable.getSelectedRow();
        if (selectedRow != -1) {
            int option = JOptionPane.showConfirmDialog(this, "Are you sure you want to delete this note?", "Confirm Deletion", JOptionPane.YES_NO_OPTION);
            if (option == JOptionPane.YES_OPTION) {
                DefaultTableModel model = (DefaultTableModel) notesTable.getModel();
                String title = (String) model.getValueAt(selectedRow, 1); // Get the title of the selected note
                model.removeRow(selectedRow);
                // Update note numbers after deletion
                for (int i = selectedRow; i < model.getRowCount(); i++) {
                    model.setValueAt(i + 1, i, 0);
                }
                deleteNoteFromDatabase(title); // Delete the note from the database using the title
            }
        } else {
            JOptionPane.showMessageDialog(this, "Please select a note to delete.", "No Note Selected", JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_deleteNoteActionPerformed

    private void deleteNoteFromDatabase(String title) {
        try {
            Class.forName("org.postgresql.Driver");
            try (Connection conn = DriverManager.getConnection("jdbc:postgresql://localhost:5432/UserInfo", "studyflow", "1234");
                 PreparedStatement stmt = conn.prepareStatement("DELETE FROM login.notes WHERE title = ?")) {
                stmt.setString(1, title); // Set the title parameter in the prepared statement
                int rowsAffected = stmt.executeUpdate();
                if (rowsAffected > 0) {
                JOptionPane.showMessageDialog(null, "Note successfully deleted.");
                } else {
                    JOptionPane.showMessageDialog(null, "Note not found in database.", "Delete Note", JOptionPane.WARNING_MESSAGE);
                }
            }
        } catch (ClassNotFoundException | SQLException e) {
            JOptionPane.showMessageDialog(null, "Error deleting note from database: " + e.getMessage());
        }
    }

    private void openNoteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openNoteActionPerformed
        openNote();
        dispose();
    }//GEN-LAST:event_openNoteActionPerformed

private void openNote() {
    int selectedRow = notesTable.getSelectedRow();
    if (selectedRow != -1) {
        int noteId = (int) notesTable.getValueAt(selectedRow, 0); // Assuming the first column is note_id
        Note note = fetchNoteDataFromDatabase(noteId);
        if (note != null) {
            AddNote addNotePanel = new AddNote();
            addNotePanel.populateFields(note.getTitle(), note.getText(), note.getSubject(), note.getNoteEntry());

            JFrame frame = new JFrame("Edit Note");
            frame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
            frame.getContentPane().add(addNotePanel);
            frame.pack();
            frame.setLocationRelativeTo(null); // Center the frame on the screen
            frame.setVisible(true);
            
            refreshNotesTable();
            
            JFrame homePageFrame = (JFrame) SwingUtilities.getWindowAncestor(this);
            homePageFrame.dispose();
        } else {
            JOptionPane.showMessageDialog(this, "Failed to load the note data.", "Error", JOptionPane.ERROR_MESSAGE);
        }
    } else {
        JOptionPane.showMessageDialog(this, "Please select a note to open.", "No Note Selected", JOptionPane.WARNING_MESSAGE);
    }
}


private Note fetchNoteDataFromDatabase(int noteId) {
    Note note = null;
    try {
        Class.forName("org.postgresql.Driver");
        try (Connection conn = DriverManager.getConnection("jdbc:postgresql://localhost:5432/UserInfo", "studyflow", "1234");
             PreparedStatement stmt = conn.prepareStatement("SELECT title, text, subject, note_entry FROM login.notes WHERE note_id = ?")) {
            stmt.setInt(1, noteId);
            ResultSet rs = stmt.executeQuery();
            if (rs.next()) {
                String title = rs.getString("title").trim();
                String text = rs.getString("text").trim();
                String subject = rs.getString("subject").trim();
                String noteEntry = rs.getString("note_entry").trim();
                note = new Note(title, text, subject, noteEntry);
                
                refreshNotesTable();
            }
        }
    } catch (ClassNotFoundException | SQLException e) {
        // Handle or log the exception as needed

    }
    return note;
}

    public void fetchAndRefreshNotes() {
        loadNotesData();
        }

public class Note {
    private String title;
    private String text;
    private String subject;
    private String noteEntry;

    public Note(String title, String text, String subject, String noteEntry) {
        this.title = title;
        this.text = text;
        this.subject = subject;
        this.noteEntry = noteEntry;
    }

    public String getTitle() {
        return title;
    }

    public String getText() {
        return text;
    }

    public String getSubject() {
        return subject;
    }

    public String getNoteEntry() {
        return noteEntry;
    }
}

private void loadNotesData() {
    DefaultTableModel model = (DefaultTableModel) notesTable.getModel();
    model.setRowCount(0); // Clear existing data

    try {
        Class.forName("org.postgresql.Driver");
        try (Connection conn = DriverManager.getConnection("jdbc:postgresql://localhost:5432/UserInfo", "studyflow", "1234");
             Statement stmt = conn.createStatement()) {
            ResultSet rs = stmt.executeQuery("SELECT note_id, title, date FROM login.notes");
            while (rs.next()) {
                int noteId = rs.getInt("note_id");
                String title = rs.getString("title");
                String date = rs.getString("date");
                model.addRow(new Object[]{noteId, title, date}); // Use note_id from the database
            }
        }
    } catch (ClassNotFoundException | SQLException e) {
        JOptionPane.showMessageDialog(null, "Error loading notes: " + e.getMessage());
    }
}

public void refreshNotesTable() {
    loadNotesData(); // Assuming loadNotesData method populates the table with data
}


    
    private void remindereminderButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_remindereminderButtonActionPerformed
        JOptionPane.showMessageDialog(this, "This code is work in progress. Wait for the next update!", "Work in Progress", JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_remindereminderButtonActionPerformed

    private void searchReminderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchReminderActionPerformed
        JOptionPane.showMessageDialog(this, "This code is work in progress. Wait for the next update!", "Work in Progress", JOptionPane.INFORMATION_MESSAGE);

    }//GEN-LAST:event_searchReminderActionPerformed

    private void openReminderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openReminderActionPerformed
        JOptionPane.showMessageDialog(this, "This code is work in progress. Wait for the next update!", "Work in Progress", JOptionPane.INFORMATION_MESSAGE);

    }//GEN-LAST:event_openReminderActionPerformed

    private void deleteReminderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteReminderActionPerformed
        JOptionPane.showMessageDialog(this, "This code is work in progress. Wait for the next update!", "Work in Progress", JOptionPane.INFORMATION_MESSAGE);

    }//GEN-LAST:event_deleteReminderActionPerformed


    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(HomePage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {  
            HomePage homePage = new HomePage();
            homePage.setLocationRelativeTo(null);
            homePage.setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel HomePanel;
    private javax.swing.JLabel LOGO;
    private javax.swing.JPanel accountHolder;
    private javax.swing.JLabel accountIcon;
    private javax.swing.JLabel accountLabel;
    private javax.swing.JButton addbutton;
    private javax.swing.JButton deleteNote;
    private javax.swing.JButton deleteReminder;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JButton noteButton;
    private javax.swing.JTable notesTable;
    private javax.swing.JTable notesTable1;
    private javax.swing.JButton openNote;
    private javax.swing.JButton openReminder;
    private javax.swing.JButton reminderButton;
    private javax.swing.JTextField searchNote;
    private javax.swing.JTextField searchReminder;
    // End of variables declaration//GEN-END:variables
}
